name: "üîß Comprehensive CI Pipeline"

on:
  workflow_call:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      run_benchmarks:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main, develop, 'feature/**', 'bugfix/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      run_benchmarks:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  CACHE_VERSION: 'v1'

jobs:
  # ==========================================
  # üîç Change Detection & Path Filtering
  # ==========================================
  detect-changes:
    name: "üîç Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend || 'false' }}
      frontend: ${{ steps.changes.outputs.frontend || 'false' }}
      ml: ${{ steps.changes.outputs.ml || 'false' }}
      workflows: ${{ steps.changes.outputs.workflows || 'false' }}
      docs: ${{ steps.changes.outputs.docs || 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'package.json'
              - 'tsconfig.json'
            frontend:
              - 'frontend/**'
              - 'package.json'
            ml:
              - 'backend/src/ml/**'
              - 'ml_service/**'
              - 'models/**'
            workflows:
              - '.github/workflows/**'
            docs:
              - '*.md'
              - 'docs/**'

  # ==========================================
  # üèóÔ∏è Backend Build & Test
  # ==========================================
  backend-ci:
    name: "üèóÔ∏è Backend CI"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.workflows == 'true' }}
    
    strategy:
      matrix:
        node-version: [18, 20]
        include:
          - node-version: 18
            is-primary: true
          - node-version: 20
            is-primary: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            backend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline
          cd backend && npm ci --prefer-offline

      - name: TypeScript type check
        working-directory: backend
        run: npx tsc --noEmit

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Run backend tests
        if: ${{ !inputs.skip_tests }}
        working-directory: backend
        run: |
          npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload backend test results
        if: matrix.is-primary && !inputs.skip_tests
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: backend/coverage/
          retention-days: 30

      - name: Cache backend dist
        if: matrix.is-primary
        uses: actions/cache@v4
        with:
          path: backend/dist
          key: ${{ runner.os }}-backend-dist-${{ github.sha }}

  # ==========================================
  # ‚öõÔ∏è Frontend Build & Test
  # ==========================================
  frontend-ci:
    name: "‚öõÔ∏è Frontend CI"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.workflows == 'true' }}
    
    strategy:
      matrix:
        node-version: [18, 20]
        include:
          - node-version: 18
            is-primary: true
          - node-version: 20
            is-primary: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline
          cd frontend && npm ci --prefer-offline

      - name: TypeScript type check
        working-directory: frontend
        run: npx tsc --noEmit

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          CI: true
          GENERATE_SOURCEMAP: false

      - name: Run frontend tests
        if: ${{ !inputs.skip_tests }}
        working-directory: frontend
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload frontend test results
        if: matrix.is-primary && !inputs.skip_tests
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: frontend/coverage/
          retention-days: 30

      - name: Cache frontend build
        if: matrix.is-primary
        uses: actions/cache@v4
        with:
          path: frontend/build
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}

  # ==========================================
  # üêç ML Service CI
  # ==========================================
  ml-service-ci:
    name: "üêç ML Service CI"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.ml == 'true' || needs.detect-changes.outputs.workflows == 'true' }}
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        include:
          - python-version: '3.9'
            is-primary: true
          - python-version: '3.10'
            is-primary: false
          - python-version: '3.11'
            is-primary: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install fastapi uvicorn pydantic pytest pytest-cov pytest-asyncio
          pip install onnxruntime scikit-learn numpy pandas matplotlib seaborn
          pip install black flake8 mypy isort bandit safety

      - name: Code formatting check (Black)
        run: black --check --diff ml_service/

      - name: Import sorting check (isort)
        run: isort --check-only --diff ml_service/

      - name: Linting (flake8)
        run: flake8 ml_service/ --max-line-length=88 --extend-ignore=E203

      - name: Type checking (mypy)
        run: mypy ml_service/ --ignore-missing-imports

      - name: Security audit (bandit)
        run: bandit -r ml_service/ -f json -o bandit-report.json || true

      - name: Dependency security check (safety)
        run: safety check --json --output safety-report.json || true

      - name: Run ML service tests
        if: ${{ !inputs.skip_tests }}
        run: |
          cd ml_service
          python -m pytest --cov=. --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}/ml_service

      - name: Upload ML test results
        if: matrix.is-primary && !inputs.skip_tests
        uses: actions/upload-artifact@v4
        with:
          name: ml-test-results
          path: |
            ml_service/htmlcov/
            ml_service/coverage.xml
            bandit-report.json
            safety-report.json
          retention-days: 30

  # ==========================================
  # üß™ Integration Tests
  # ==========================================
  integration-tests:
    name: "üß™ Integration Tests"
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, ml-service-ci]
    if: |
      always() && 
      !cancelled() && 
      !inputs.skip_tests &&
      (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped') &&
      (needs.frontend-ci.result == 'success' || needs.frontend-ci.result == 'skipped') &&
      (needs.ml-service-ci.result == 'success' || needs.ml-service-ci.result == 'skipped')
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: connect4_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Restore backend cache
        uses: actions/cache@v4
        with:
          path: backend/dist
          key: ${{ runner.os }}-backend-dist-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Restore frontend cache
        uses: actions/cache@v4
        with:
          path: frontend/build
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Install dependencies
        run: |
          npm ci --prefer-offline
          cd backend && npm ci --prefer-offline
          cd ../frontend && npm ci --prefer-offline
          cd ../ml_service && python -m pip install --upgrade pip
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install fastapi uvicorn pydantic pytest pytest-asyncio httpx

      - name: Run integration tests
        run: |
          # Start services in background
          cd backend && npm run start:prod &
          cd ml_service && python -m uvicorn ml_service:app --host 0.0.0.0 --port 8001 &
          
          # Wait for services to start
          sleep 10
          
          # Run integration tests
          npm run test:integration || true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/connect4_test
          ML_SERVICE_URL: http://localhost:8001

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 30

  # ==========================================
  # üîí Security & Quality Analysis
  # ==========================================
  security-analysis:
    name: "üîí Security Analysis"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  # ==========================================
  # üìä Performance Benchmarks
  # ==========================================
  performance-benchmarks:
    name: "üìä Performance Benchmarks"
    runs-on: ubuntu-latest
    needs: [backend-ci, ml-service-ci]
    if: |
      always() && 
      !cancelled() && 
      inputs.run_benchmarks &&
      (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped') &&
      (needs.ml-service-ci.result == 'success' || needs.ml-service-ci.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline
          cd backend && npm ci --prefer-offline
          cd ../ml_service && python -m pip install --upgrade pip
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install fastapi uvicorn pydantic pytest-benchmark

      - name: Run AI algorithm benchmarks
        run: |
          cd backend
          npm run benchmark:ai || true

      - name: Run ML service benchmarks
        run: |
          cd ml_service
          python -m pytest benchmarks/ --benchmark-only --benchmark-json=benchmark-results.json || true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            backend/benchmark-results.json
            ml_service/benchmark-results.json
          retention-days: 30

  # ==========================================
  # üìã CI Summary
  # ==========================================
  ci-summary:
    name: "üìã CI Summary"
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-ci, frontend-ci, ml-service-ci, integration-tests, security-analysis]
    if: always()
    
    steps:
      - name: CI Summary
        run: |
          echo "## üîß CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.backend-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ML Service | ${{ needs.ml-service-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Analysis | ${{ needs.security-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Changed Components" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.detect-changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "- ML: ${{ needs.detect-changes.outputs.ml }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflows: ${{ needs.detect-changes.outputs.workflows }}" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [[ "${{ needs.backend-ci.result }}" == "failure" || "${{ needs.frontend-ci.result }}" == "failure" || "${{ needs.ml-service-ci.result }}" == "failure" ]]; then
            echo "‚ùå CI Pipeline failed!"
            exit 1
          else
            echo "‚úÖ CI Pipeline passed!"
          fi
